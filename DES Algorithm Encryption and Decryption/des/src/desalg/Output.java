/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desalg;

import desalg.desui;

import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.event.MouseEvent;

import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @authors Christian Wakim
 *          Karim Hatem
 *          Elena Ghazi
 *          Rita-Maria Charbel
 *          
 *          DES code Abhday Bhat
 */
public class Output extends javax.swing.JDialog {

    /**
     * Creates new form Output
     */
    public Output(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setResizable(false);
    }
    
    public Output(String para, String message1, String key1) {
    	this.message1=message1;
        this.key1=key1;
        initComponents();
      //  winout.setText(para);
        this.toFront();
        //winout.setEditable(false);
        setResizable(true);
        //this.setSize(new Dimension(1200, 800));
        this.setBounds(GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds());
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        m = new javax.swing.JLabel();
        k = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        String [] col = {"","LEFT CIRCULAR SHIFT","K(i)"}; //k(i) is after permuted choice2
        String [] col2 = {"Round","LEFT(i-1)","RIGHT(i-1)","EXPANSION","XOR1","SBOX","PERMUTATION","XOR2","RESULT"};
        
        String [] columnToolTips = {"","The key is divided into two 28 bit sequences. Left Circular Shift is performed on each. They are then contatenated","After Permuted Choice 2, we get the key."};
        jTable1 = new javax.swing.JTable(desui.DES.answer,col) {
        	//Implement table cell tool tips.           
            public String getToolTipText(MouseEvent e) {
            	int col = columnAtPoint(e.getPoint());
                int modelCol = this.convertColumnIndexToModel(col);
                String retStr;
                try {
                   retStr = columnToolTips[modelCol];
                } catch (NullPointerException ex) {
                   retStr = "";
                } catch (ArrayIndexOutOfBoundsException ex) {
                   retStr = "";
                }
                if (retStr.length() < 1) {
                   retStr = super.getToolTipText(e);
                }
                return retStr;
            }
        };
        
        
        
        
        
        String [] columnToolTips2 = {"","For each round, the output of the previous round is split in two 32 bit sequences. This is the first.",
        		"For each round, the output of the previous round is split in two 32 bit sequences. This is the second.","Expansion Permutation is performed on the Right part of the output of the previous round through the use of the 'E table'.",
        		"This is the output of the Expansion Permutation XOR with the Key the appropriate key. For Encryption, K(i) is used, and for decryption, the keys are used in reverse order (starting with K(16) to K(1)).",
        		"We perform Substitution through the use of 'S-box' on the output of the XOR operation in the previous cell.",
        		"We perform a Permutation on the output of the previous cell.",
        		"The result of the previous cell and the Left part of the output of the previous round are XORed.",
        		"Result is the concatenation of R(i-1) and L(i-1) respectively."};
        
        round = new javax.swing.JTable(desui.DES.rd,col2) {
        	//Implement table cell tool tips.           
            public String getToolTipText(MouseEvent e) {
            	String retStr;
            	int coll = columnAtPoint(e.getPoint());
                int modelCol2 = this.convertColumnIndexToModel(coll);
                try {
                   retStr = columnToolTips2[modelCol2];
                } catch (NullPointerException ex) {
                   retStr = "";
                } catch (ArrayIndexOutOfBoundsException ex) {
                   retStr = "";
                }
                if (retStr.length() < 1) {
                   retStr = super.getToolTipText(e);
                }
                return retStr;
            }
        };
        
        top = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        display_cipher = new javax.swing.JLabel();
        display_cipher_content = new javax.swing.JTextArea();
        disp1 = new javax.swing.JLabel();
        disp2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jDesktopPane1.setBackground(new java.awt.Color(51, 51, 51));
        jDesktopPane1.setMaximumSize(new java.awt.Dimension(0, 0));

        top.setBackground(new java.awt.Color(89, 89, 89));
        top.setForeground(new java.awt.Color(52, 255, 0));
        top.setEditable(false);
        top.setFont(new java.awt.Font("Monospaced", 0, 18));
        top.setLineWrap(true);
        top.setWrapStyleWord(true);
        String temporary ="";
        if (desui.chosen.equals("encrypt")) {
        	temporary = "Message:";
        }
        else {
        	temporary = "Cipher:";
        }
        top.setText("After performing 'Initial Permutation' on the "+ temporary + desui.DES.initial_permutation + "\n" + "After performing 'Permuted Choice 1' on the Key: "+desui.DES.pc1);
        
        
        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setFont(new java.awt.Font("Monospaced", 1, 17)); // NOI18N
        jButton1.setForeground(new java.awt.Color(52, 255, 0));
        jButton1.setText("Go back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(52, 255, 0));
        jLabel1.setText("OUTPUT");
        
        
        disp1.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        disp1.setForeground(new java.awt.Color(52, 255, 0));
        disp1.setText("After shifting:" + desui.DES.after_swap);
        
        disp2.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        disp2.setForeground(new java.awt.Color(52, 255, 0));
        disp2.setText("After PC1: " + desui.DES.definitive_cipher);
        
        display_cipher.setFont(new java.awt.Font("Monospaced",1,28));
        display_cipher.setForeground(new java.awt.Color(52, 255, 0));
        
        
        if (desui.chosen.equals("encrypt")) {
        	display_cipher.setText("CIPHER: ");//+desui.ciph);
        }
        else if (desui.chosen.equals("decrypt")){
        	display_cipher.setText("MESSAGE: ");//+desui.ciph);
        }
        else {
        	display_cipher.setText("nothing");
        }
        
        
        display_cipher_content.setBackground(new java.awt.Color(89, 89, 89));
        display_cipher_content.setForeground(new java.awt.Color(52, 255, 0));
        top.setEditable(false);
        display_cipher_content.setFont(new java.awt.Font("Monospaced", 0, 28));
        display_cipher_content.setLineWrap(true);
        display_cipher_content.setWrapStyleWord(true);
        display_cipher_content.setText(desui.ciph);
        display_cipher_content.setEditable(false);

        m.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        m.setForeground(new java.awt.Color(52, 255, 0));
        String s = "";
        if (desui.chosen.equals("encrypt")) {
        	m.setText("Message: "+ message1);
        }
        else {
        	m.setText("Cipher: "+ message1);
        }
        	
        
        k.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        k.setForeground(new java.awt.Color(52, 255, 0));
        k.setText("Key: "+key1);
        k.setLocation(100, 100);
        
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 16));
        
        ((DefaultTableCellRenderer)jTable1.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        for (int i = 0;i<3;i++) {
	        jTable1.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
        }
        
        round.setFont(new java.awt.Font("Tahoma", 0, 16));
        round.setRowHeight(20);
        
        
        ((DefaultTableCellRenderer)round.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);


        for (int i = 0;i<9;i++) {
	        round.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
        }
        
        jScrollPane2.setViewportView(jTable1);
        jScrollPane3.setViewportView(round);
           
            
        jDesktopPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(m, javax.swing.JLayeredPane.DEFAULT_LAYER);
        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, jDesktopPane1Layout.createSequentialGroup()
                        .addGap(600, 600, 600)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(580,580,580)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(top,820,820,820)
            .addComponent(jScrollPane3, 1500,1500,1500)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
            		.addComponent(jScrollPane2,600,600,600)
            		.addGap(25)
            		.addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                .addGroup(jDesktopPane1Layout.createSequentialGroup()
		                		.addComponent(display_cipher,180,180,180)
			                	.addComponent(display_cipher_content,350,350,350)
		                		)
            				
	            		.addComponent(disp1,400,400,400)
	            		.addComponent(disp2,400,400,400)))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
            		.addGap(8)
            		.addComponent(m, 300, 300, 300))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
            		.addGap(8)
            		.addComponent(k, 300, 300, 300))

        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                		.addGap(30)
                		.addComponent(top,70,70,70)
                		.addGap(30)
                		.addComponent(jScrollPane3, 300,300,300)
                		.addGap(30)
                		.addComponent(jScrollPane2, 150, 150, 150))
                .addContainerGap()
                .addGap(40, 40, 40))
            .addComponent(m, 100, 100, 100)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
            		.addGap(30)
            		.addComponent(k,100,100,100))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
            	.addGap(530)
            	.addComponent(disp1,30,30,30)
            	.addGap(1)
            	.addComponent(disp2,30,30,30)
            	.addGap(20)
            	.addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            			.addGap(50,50,50)
            			.addComponent(display_cipher,30,30,30)
    	            	.addComponent(display_cipher_content,50,50,50))
            			)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new desui().setVisible(true);
        //new Output(null).setVisible(false);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Output dialog = new Output(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel m;
    private javax.swing.JLabel k;
    //private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    //Tables
    private javax.swing.JTable jTable1;
    private javax.swing.JTable round;
    //Labels & Text Areas
    private String message1;
    private String key1;
    private javax.swing.JTextArea top;
    private javax.swing.JLabel display_cipher; 
    private javax.swing.JTextArea display_cipher_content;
    private javax.swing.JLabel disp1;
    private javax.swing.JLabel disp2;
    // End of variables declaration//GEN-END:variables
}
